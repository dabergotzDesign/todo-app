{"version":3,"sources":["actions/index.js","reducers/index.js","modules/storage.js","components/header.js","components/todo-item.js","components/todo-list.js","components/todo-form.js","components/todo-filter.js","components/app.js","components/help.js","components/not-found.js","components/router.js","index.js"],"names":["SET_FILTER","ADD_TODO","UPDATE_TODO_TEXT","TOGGLE_TODO","REMOVE_TODO","filters","ALL","DONE","UNDONE","appReducer","combineReducers","filter","state","actions","action","type","toDoItems","id","uuid","text","done","nextState","this","canUseLocalStorage","Error","key","value","localStorage","setItem","defaultValue","getItem","test","removeItem","e","Header","props","className","tagline","ToDoItem","keyCode","target","blur","todo","data","data-id","checked","onChange","toggleToDo","htmlFor","updateToDoText","onKeyUp","handleKeyUp","onClick","removeToDo","React","Component","connect","ToDoList","filteredItems","filtered","items","item","push","map","toggleToDoDone","ToDoForm","textInput","createRef","handleSubmit","preventDefault","current","trim","addToDo","currentTarget","reset","onSubmit","placeholder","ref","aria-hidden","ToDoFilter","role","aria-label","Object","keys","filterKey","setFilter","App","Help","useEffect","document","title","NotFound","Router","basename","exact","path","component","store","createStore","serializedState","JSON","parse","err","loadState","window","__REDUX_DEVTOOLS_EXTENSION__","subscribe","stringify","saveState","getState","render","querySelector"],"mappings":"mOAMaA,EAAa,aAIbC,EAAW,WACXC,EAAmB,mBACnBC,EAAc,cACdC,EAAc,cAKdC,EAAU,CACrBC,IAAK,MACLC,KAAM,OACNC,OAAQ,U,0kBC+BV,IAKeC,EALIC,YAAgB,CACjCC,OAjDF,WAAsD,IAAtCC,EAAqC,uDAA7BC,EAAgBP,IAAKQ,EAAQ,uCACnD,OAAQA,EAAOC,MACb,KAAKF,EACH,OAAOC,EAAOH,OAChB,QACE,OAAOC,IA6CXI,UAzCF,WAAwC,IAArBJ,EAAoB,uDAAZ,GAAIE,EAAQ,uCACrC,OAAQA,EAAOC,MACb,KAAKF,EACH,IAAMI,EAAKC,MAEX,OAAO,EAAP,GACKN,EADL,eAEGK,EAAK,CACJC,KAAMD,EACNE,KAAML,EAAOK,KACbC,MAAM,KAGZ,KAAKP,EACH,OAAO,EAAP,GACKD,EADL,eAEGE,EAAOI,KAFV,KAGON,EAAME,EAAOI,MAHpB,CAIIC,KAAML,EAAOK,SAGnB,KAAKN,EACH,OAAO,EAAP,GACKD,EADL,eAEGE,EAAOI,KAFV,KAGON,EAAME,EAAOI,MAHpB,CAIIE,MAAOR,EAAME,EAAOI,MAAME,SAGhC,KAAKP,EACH,IAAIQ,EAAS,KAAQT,GAGrB,cAFOS,EAAUP,EAAOI,MAEjBG,EACT,QACE,OAAOT,M,iBCGE,I,WAlDb,aACE,GADa,qBACRU,KAAKC,qBACR,MAAMC,MAAM,yC,gDAGZC,EAAKC,GACPC,aAAaC,QAAQH,EAAKC,K,0BAExBD,GAA2B,IAAtBI,EAAqB,uDAAN,KAChBH,EAAQC,aAAaG,QAAQL,GAEnC,OAAc,OAAVC,EACKA,EAEFG,I,2CAGP,IAAIE,EAAO,iBAEX,IACEJ,aAAaC,QAAQG,EAAMA,GAC3BJ,aAAaK,WAAWD,GACxB,MAAOE,GACP,OAAO,EAET,OAAO,M,0CCVIC,EAbA,SAAAC,GACb,OACE,4BAAQC,UAAU,UAChB,2CACA,0BAAMA,UAAU,WAAWD,EAAME,WCFjCC,E,oLACQL,GAEQ,KAAdA,EAAEM,SACJN,EAAEO,OAAOC,S,+BAGH,IAAD,OACDC,EAAOpB,KAAKa,MAAMQ,KAExB,OACE,wBAAIP,UAAU,YAAYQ,UAASF,EAAKxB,MACtC,4BAEE,yBAAKkB,UAAU,kCACb,2BACEA,UAAU,uBACVV,MAAOgB,EAAKxB,KACZD,GAAE,oBAAeyB,EAAKxB,MACtBH,KAAK,WACL8B,QAASH,EAAKtB,KACd0B,SAAU,SAAAb,GACR,EAAKE,MAAMY,WAAWL,EAAKxB,SAG/B,2BACEkB,UAAU,uBACVY,QAAO,oBAAeN,EAAKxB,OAF7B,UASJ,4BACE,2BACEH,KAAK,OACLqB,UAAU,eACVV,MAAOgB,EAAKvB,KACZ2B,SAAU,SAAAb,GACR,EAAKE,MAAMc,eAAeP,EAAKxB,KAAMe,EAAEO,OAAOd,QAEhDwB,QAAS,SAAAjB,GACP,EAAKkB,YAAYlB,OAKvB,wBAAIG,UAAU,cACZ,uBACEA,UAAU,+BACVgB,QAAS,SAAAnB,GAAC,OAAI,EAAKE,MAAMkB,WAAWX,EAAKxB,e,GAnD9BoC,IAAMC,WAsEdC,eACb,SAAA5C,GAAK,MAAK,KACV,CACEqC,eJtC0B,SAAC/B,EAAMC,GACnC,MAAO,CAAEJ,KAAMb,EAAkBgB,OAAMC,SIsCrC4B,WJ/BsB,SAAA7B,GACxB,MAAO,CAAEH,KAAMZ,EAAae,SI+B1BmC,WJpCsB,SAAAnC,GACxB,MAAO,CAAEH,KAAMX,EAAac,UI8BfsC,CAOblB,GC7EImB,E,2MACJC,cAAgB,WACd,IAAMC,EAAW,GAEjB,IAAK,IAAMzC,KAAQ,EAAKiB,MAAMyB,MAAO,CACnC,IAAMC,EAAO,EAAK1B,MAAMyB,MAAM1C,IAGN,QAAtB,EAAKiB,MAAMxB,QACY,SAAtB,EAAKwB,MAAMxB,SAAmC,IAAdkD,EAAKzC,MACf,WAAtB,EAAKe,MAAMxB,SAAqC,IAAdkD,EAAKzC,OAExCuC,EAASG,KAAKD,GAGlB,OAAOF,G,wEAGC,IAAD,OACP,OACE,yBAAKvB,UAAU,aACb,2BAAOA,UAAU,sCACf,+BACGd,KAAKoC,gBAAgBK,KAAI,SAAAF,GAAI,OAC5B,kBAAC,EAAD,CACEpC,IAAG,oBAAeoC,EAAK3C,MACvByB,KAAMkB,EACNZ,eAAgB,EAAKd,MAAMc,eAC3Be,eAAgB,EAAK7B,MAAM6B,eAC3BX,WAAY,EAAKlB,MAAMkB,uB,GA7BhBC,IAAMC,WAkDdC,eAAQ,SAAA5C,GAAK,MAAK,CAC/BgD,MAAOhD,EAAMI,UACbL,OAAQC,EAAMD,UAFD6C,CAGXC,GCrDEQ,E,2MAOJC,UAAYZ,IAAMa,Y,EAElBC,aAAe,SAAAnC,GACbA,EAAEoC,iBACF,IAAMlD,EAAO,EAAK+C,UAAUI,QAAQ5C,MAAM6C,OAC1C,EAAKpC,MAAMqC,QAAQrD,GACnBc,EAAEwC,cAAcC,S,wEAKhB,OACE,0BAAMtC,UAAU,mBAAmBuC,SAAUrD,KAAK8C,cAChD,2BACEhC,UAAU,eACVrB,KAAK,OACL6D,YAAY,0BACZC,IAAKvD,KAAK4C,YAEZ,yBAAK9B,UAAU,sBACb,4BAAQA,UAAU,4BAA4BrB,KAAK,UACjD,uBAAGqB,UAAU,cAAc0C,cAAY,SADzC,sB,GA3BaxB,IAAMC,WAyCdC,eACb,SAAA5C,GAAK,MAAK,KACV,CACE4D,QNbmB,SAAArD,GACrB,MAAO,CAAEJ,KAAMd,EAAUkB,UMSZqC,CAKbS,GC9CIc,E,2MACJ1E,QAAU,CAAC,MAAO,SAAU,Q,wEAElB,IAAD,OACP,OACE,yBAAK+B,UAAU,2BACb,yBACEA,UAAU,yBACV4C,KAAK,QACLC,aAAW,8BAEVC,OAAOC,KAAK9E,GAAS0D,KAAI,SAAAqB,GACxB,IAAMzE,EAASN,EAAQ+E,GAEvB,OACE,4BACErE,KAAK,SACLqB,UAAS,wBACP,EAAKD,MAAMxB,SAAWA,EAAS,SAAW,IAE5CyC,QAAS,SAAAnB,GACP,EAAKE,MAAMkD,UAAU1E,IAEvBc,IAAK2D,GAEJzE,Y,GAzBQ2C,IAAMC,WAwChBC,eACb,SAAA5C,GAAK,MAAK,CACRD,OAAQC,EAAMD,UAEhB,CACE0E,UPpBqB,SAAA1E,GACvB,MAAO,CAAEI,KAAMf,EAAYW,YOcd6C,CAObuB,GCiCaO,E,iLAXX,OACE,yBAAKlD,UAAU,aACb,kBAAC,EAAD,CAAQC,QAAQ,iCAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAtEUiB,IAAMC,WCWT,SAASgC,IAKtB,OAJAC,qBAAU,WACRC,SAASC,MAAQ,uBAChB,IAGD,yBAAKtD,UAAU,aACb,kBAAC,EAAD,CAAQC,QAAQ,0CAChB,wDACA,yF,ICNSsD,E,4LAlBXF,SAASC,MAAQ,4B,+BAGjB,OACE,yBAAKtD,UAAU,aACb,kBAAC,EAAD,CAAQC,QAAQ,yBAChB,yBAAKD,UAAU,uBACb,gDAEE,8BAHJ,+C,GARekB,IAAMC,WCadqC,EAVA,kBACb,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOS,KAAK,QAAQC,UAAWT,IAC/B,kBAAC,IAAD,CAAOS,UAAWL,OCOlBM,G,YAAQC,YACZzF,EVWuB,WACvB,IACE,IAAM0F,EAAkBxE,aAAaG,QAAQ,oBAC7C,GAAwB,OAApBqE,EACF,OAEF,OAAOC,KAAKC,MAAMF,GAClB,MAAOG,GACP,QUlBFC,GACAC,OAAOC,8BAAgCD,OAAOC,iCAGhDR,EAAMS,WAAU,YVkBS,SAAA9F,GACvB,IACE,IAAMuF,EAAkBC,KAAKO,UAAU/F,GACvCe,aAAaC,QAAQ,mBAAoBuE,GACzC,MAAOG,KUrBTM,CAAUX,EAAMY,eAGlBC,iBACE,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,EAAD,OAEFR,SAASsB,cAAc,Y","file":"static/js/main.4151776f.chunk.js","sourcesContent":["/*\n ////Action types\n */\n\n// Filter\n\nexport const SET_FILTER = \"SET_FILTER\";\n\n// Todo Items\n\nexport const ADD_TODO = \"ADD_TODO\";\nexport const UPDATE_TODO_TEXT = \"UPDATE_TODO_TEXT\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const REMOVE_TODO = \"REMOVE_TODO\";\n\n/*\n * Other constants\n */\nexport const filters = {\n  ALL: \"all\",\n  DONE: \"done\",\n  UNDONE: \"undone\"\n};\n\n/*\n * Action creators\n */\n\n// Filter\n\nexport const setFilter = filter => {\n  return { type: SET_FILTER, filter };\n};\n\n// Todo items\n\nexport const addToDo = text => {\n  return { type: ADD_TODO, text };\n};\n\nexport const updateToDoText = (uuid, text) => {\n  return { type: UPDATE_TODO_TEXT, uuid, text };\n};\n\nexport const removeToDo = uuid => {\n  return { type: REMOVE_TODO, uuid };\n};\n\nexport const toggleToDo = uuid => {\n  return { type: TOGGLE_TODO, uuid };\n};\n","import { combineReducers } from \"redux\";\nimport * as actions from \"../actions/index\";\nimport uuid from \"uuid/v4\";\n\nfunction filter(state = actions.filters.ALL, action) {\n  switch (action.type) {\n    case actions.SET_FILTER:\n      return action.filter;\n    default:\n      return state;\n  }\n}\n\nfunction toDoItems(state = {}, action) {\n  switch (action.type) {\n    case actions.ADD_TODO:\n      const id = uuid();\n\n      return {\n        ...state,\n        [id]: {\n          uuid: id,\n          text: action.text,\n          done: false\n        }\n      };\n    case actions.UPDATE_TODO_TEXT:\n      return {\n        ...state,\n        [action.uuid]: {\n          ...state[action.uuid],\n          text: action.text\n        }\n      };\n    case actions.TOGGLE_TODO:\n      return {\n        ...state,\n        [action.uuid]: {\n          ...state[action.uuid],\n          done: !state[action.uuid].done\n        }\n      };\n    case actions.REMOVE_TODO:\n      let nextState = { ...state };\n      delete nextState[action.uuid];\n\n      return nextState;\n    default:\n      return state;\n  }\n}\n\nconst appReducer = combineReducers({\n  filter,\n  toDoItems\n});\n\nexport default appReducer;\n","class Storage {\n  constructor() {\n    if (!this.canUseLocalStorage()) {\n      throw Error(\"The Local storage is full or disabled\");\n    }\n  }\n  set(key, value) {\n    localStorage.setItem(key, value);\n  }\n  get(key, defaultValue = null) {\n    const value = localStorage.getItem(key);\n\n    if (value !== null) {\n      return value;\n    }\n    return defaultValue;\n  }\n  canUseLocalStorage() {\n    let test = \"this is a test\";\n\n    try {\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n}\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"react-todo-state\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"react-todo-state\", serializedState);\n  } catch (err) {\n    //ignore write errors\n  }\n};\n\nexport default new Storage();\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Header = props => {\n  return (\n    <header className=\"header\">\n      <h1>What to do?</h1>\n      <span className=\"tagline\">{props.tagline}</span>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  tagline: PropTypes.string\n};\n\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateToDoText, toggleToDo, removeToDo } from \"../actions/index\";\nimport PropTypes from \"prop-types\";\n\nclass ToDoItem extends React.Component {\n  handleKeyUp(e) {\n    //removes focus when [ENTER] key is pressed\n    if (e.keyCode === 13) {\n      e.target.blur();\n    }\n  }\n  render() {\n    const todo = this.props.data;\n\n    return (\n      <tr className=\"todo-item\" data-id={todo.uuid}>\n        <td>\n          {/* CHECKBOX */}\n          <div className=\"custom-control custom-checkbox\">\n            <input\n              className=\"custom-control-input\"\n              value={todo.uuid}\n              id={`todo-done-${todo.uuid}`}\n              type=\"checkbox\"\n              checked={todo.done}\n              onChange={e => {\n                this.props.toggleToDo(todo.uuid);\n              }}\n            />\n            <label\n              className=\"custom-control-label\"\n              htmlFor={`todo-done-${todo.uuid}`}\n            >\n              &nbsp;\n            </label>\n          </div>\n        </td>\n        {/*TO DO  & UPDATE TEXT  */}\n        <td>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            value={todo.text}\n            onChange={e => {\n              this.props.updateToDoText(todo.uuid, e.target.value);\n            }}\n            onKeyUp={e => {\n              this.handleKeyUp(e);\n            }}\n          />\n        </td>\n        {/* DELETE TO DO */}\n        <td className=\"col-action\">\n          <i\n            className=\"icon-remove far fa-trash-alt\"\n            onClick={e => this.props.removeToDo(todo.uuid)}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nToDoItem.propTypes = {\n  todo: PropTypes.shape({\n    uuid: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    done: PropTypes.bool.isRequired\n  }).isRequired,\n  toggleToDo: PropTypes.func.isRequired,\n  updateToDoText: PropTypes.func.isRequired,\n  removeToDo: PropTypes.func.isRequired\n};\n\nexport default connect(\n  state => ({}),\n  {\n    updateToDoText,\n    toggleToDo,\n    removeToDo\n  }\n)(ToDoItem);\n","import React from \"react\";\nimport ToDoItem from \"./todo-item\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nclass ToDoList extends React.Component {\n  filteredItems = () => {\n    const filtered = [];\n\n    for (const uuid in this.props.items) {\n      const item = this.props.items[uuid];\n\n      if (\n        this.props.filter === \"all\" ||\n        (this.props.filter === \"done\" && item.done === true) ||\n        (this.props.filter === \"undone\" && item.done === false)\n      ) {\n        filtered.push(item);\n      }\n    }\n    return filtered;\n  };\n\n  render() {\n    return (\n      <div className=\"todo-list\">\n        <table className=\"todo-items  table table-borderless\">\n          <tbody>\n            {this.filteredItems().map(item => (\n              <ToDoItem\n                key={`todo-item-${item.uuid}`}\n                data={item}\n                updateToDoText={this.props.updateToDoText}\n                toggleToDoDone={this.props.toggleToDoDone}\n                removeToDo={this.props.removeToDo}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nToDoList.propTypes = {\n  items: PropTypes.objectOf(\n    PropTypes.shape({\n      done: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired,\n      uuid: PropTypes.string.isRequired\n    })\n  ),\n  filter: PropTypes.string.isRequired\n};\n\nexport default connect(state => ({\n  items: state.toDoItems,\n  filter: state.filter\n}))(ToDoList);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addToDo } from \"../actions/index\";\nimport PropTypes from \"prop-types\";\n\nclass ToDoForm extends React.Component {\n  //   constructor(props) {\n  //     super(props);\n\n  //     this.handleSubmit = this.handleSubmit.bind(this);\n  //   }\n\n  textInput = React.createRef();\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const text = this.textInput.current.value.trim();\n    this.props.addToDo(text);\n    e.currentTarget.reset();\n    //console.log(`Create new item: ${this.textInput.current.value}`);\n  };\n\n  render() {\n    return (\n      <form className=\"input-group my-3\" onSubmit={this.handleSubmit}>\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          placeholder=\"Add a new to do item...\"\n          ref={this.textInput}\n        />\n        <div className=\"input-group-append\">\n          <button className=\"btn btn-outline-secondary\" type=\"submit\">\n            <i className=\"fas fa-plus\" aria-hidden=\"true\" />\n            &nbsp;Add Item\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nToDoForm.propTypes = {\n  addToDo: PropTypes.func.isRequired\n};\n\nexport default connect(\n  state => ({}),\n  {\n    addToDo\n  }\n)(ToDoForm);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { filters, setFilter } from \"../actions/index\";\nimport PropTypes from \"prop-types\";\n\nclass ToDoFilter extends React.Component {\n  filters = [\"all\", \"undone\", \"done\"];\n\n  render() {\n    return (\n      <div className=\"todo-filters text-right\">\n        <div\n          className=\"btn-group btn-group-sm\"\n          role=\"group\"\n          aria-label=\"Set a filter to show items\"\n        >\n          {Object.keys(filters).map(filterKey => {\n            const filter = filters[filterKey];\n\n            return (\n              <button\n                type=\"button\"\n                className={`btn btn-light ${\n                  this.props.filter === filter ? \"active\" : \"\"\n                }`}\n                onClick={e => {\n                  this.props.setFilter(filter);\n                }}\n                key={filterKey}\n              >\n                {filter}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nToDoFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired\n};\n\nexport default connect(\n  state => ({\n    filter: state.filter\n  }),\n  {\n    setFilter\n  }\n)(ToDoFilter);\n","import React from \"react\";\nimport Header from \"./header\";\nimport ToDoList from \"./todo-list\";\nimport ToDoForm from \"./todo-form\";\nimport ToDoFilter from \"./todo-filter\";\n//import uuid from \"uuid/v4\";\n//import { getRandomTagline } from \"../helpers.js\";\n//import Storage from \"../modules/storage\";\n\nclass App extends React.Component {\n  /*\n  constructor(props) {\n    super(props);\n    this.storageKey = \"react-todo\";\n    const old = Storage.get(this.storageKey);\n\n    if (old) {\n      this.state = JSON.parse(old);\n    } else {\n      this.state = {\n        toDoItems: {},\n        filter: \"undone\"\n      };\n      // Storage.set(this.storageKey, JSON.stringify(this.state));\n    }\n  }\n\n  componentDidUpdate() {\n    Storage.set(this.storageKey, JSON.stringify(this.state));\n  }\n\n  addToDo = text => {\n    const todo = {\n      uuid: uuid(),\n      text: text,\n      done: false\n    };\n    this.setState(state => {\n      state.toDoItems[todo.uuid] = todo;\n      return state;\n    });\n  };\n\n  updateToDoText = (uuid, text) => {\n    this.setState(state => {\n      state.toDoItems[uuid].text = text;\n      return state;\n    });\n  };\n\n  toggleToDoDone = e => {\n    const checkbox = e.target;\n    this.setState(state => {\n      state.toDoItems[checkbox.value].done = checkbox.checked;\n      return state;\n    });\n  };\n\n  removeToDo = uuid => {\n    this.setState(state => {\n      delete state.toDoItems[uuid];\n      return state;\n    });\n  };\n\n  setFilter = filter => {\n    this.setState(state => {\n      state.filter = filter;\n      return state;\n    });\n  };\n  */\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header tagline=\"Here are all the next tasks.\" />\n        <ToDoForm />\n        <ToDoFilter />\n        <ToDoList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { useEffect } from \"react\";\nimport Header from \"./header\";\n\n// class Help extends React.Component {\n//   componentDidMount() {\n//     document.title = \"HELP | What to do?\";\n//   }\n//   render() {\n//     return (\n//       <div className=\"container\">\n//         <Header tagline=\"Your questions will be answered here.\" />\n//         <p>Where is the data stored?</p>\n//         <p>We store all information in your browsers' Local Storage.</p>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Help;\n\nexport default function Help() {\n  useEffect(() => {\n    document.title = \"Help | What to do?\";\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <Header tagline=\"Your questions will be answered here.\" />\n      <p>Where is the data stored?</p>\n      <p>We store all information in your browsers' Local Storage.</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Header from \"./header\";\n\nclass NotFound extends React.Component {\n  componentDidMount() {\n    document.title = \"Error 404 | What to do?\";\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <Header tagline=\"404 - Page not found\" />\n        <div className=\"alert alert-warning\">\n          <strong>\n            Oops...sorry!\n            <br />\n          </strong>\n          The Requested page could not be found.\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NotFound;\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport App from \"./app\";\nimport Help from \"./help\";\nimport NotFound from \"./not-found\";\n\nconst Router = () => (\n  <HashRouter basename=\"/\">\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/help\" component={Help} />\n      <Route component={NotFound} />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Router;\n","// React\nimport React from \"react\";\nimport { render } from \"react-dom\";\n\n// Redux\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport appReducer from \"./reducers/index\";\nimport { loadState, saveState } from \"./modules/storage\";\n\n// Components\nimport Router from \"./components/router\";\n\n// Styles\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport \"./sass/style.scss\";\n\n// Create Redux store and initialize the app\nconst store = createStore(\n  appReducer,\n  loadState(),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nrender(\n  <Provider store={store}>\n    <Router />\n  </Provider>,\n  document.querySelector(\"#main\")\n);\n"],"sourceRoot":""}